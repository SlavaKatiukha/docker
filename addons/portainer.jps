---
type: update
id: portainer
name: Portainer UI
settings:
  fields:
  - type: list
    name: mode
    caption: Mode
    values:
      engine: Engine
      swarm: Swarm
    default: engine
    
globals:
  user: admin
  password: ${fn.password}
  CERTS: ~/.ssh/certs
  DEPLOY_HOOK: ~/deployLE.sh
  UNDEPLOY_HOOK: ~/undeployLE.sh 
  DEPLOY_HOOK_JS: https://raw.githubusercontent.com/jelastic-jps/docker/master/addons/le-ssl-deploy-hook.js?_r=${fn.random}    
  
onInstall:
  - generateKeys: ${nodes.cp.master.id}
  - if ('${settings.mode}' == 'engine'):
      cmd[${nodes.cp.master.id}]: |-
        password=$(htpasswd -nb -B ${globals.user} ${globals.password} | cut -d ":" -f 2)
        home=$(readlink -f ~)
        mkdir -p /opt/portainer
        volumes="-v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data -v $home/.ssh/certs:/certs"
        portainer="portainer/portainer --admin-password $password --ssl --sslcert /certs/portainer.crt --sslkey /certs/portainer.key"
        docker run -d -p 443:9000 --restart always $volumes $portainer
  - elif ('${settings.mode}' == 'swarm'):
      cmd[${nodes.cp.master.id}]: |-
        password=$(htpasswd -nb -B ${globals.user} ${globals.password} | cut -d ":" -f 2)
        home=$(readlink -f ~)
        mkdir -p /opt/portainer
        docker node update --label-add master=true ${nodes.cp.master.id}-${env.domain}
        mount="--mount type=bind,src=//var/run/docker.sock,dst=/var/run/docker.sock --mount type=bind,src=/opt/portainer,dst=/data --mount type=bind,src=$home/.ssh/certs,dst=/certs"
        portainer="portainer/portainer -H unix:///var/run/docker.sock --admin-password $password --ssl --sslcert /certs/portainer.crt --sslkey /certs/portainer.key"
        docker service create --name portainer -p 443:9000 --replicas=1 --constraint node.role==manager --constraint node.labels.master==true $mount $portainer
  - install-LE
  - if (nodes.cp.length > 1):
      add-nat-forwarding: ${nodes.cp.join(id,)}

onAfterScaleOut[cp]:
  add-nat-forwarding: ${event.response.nodes.join(id,)}

actions:
  generateKeys:
    cmd[${this}]: |-
      mkdir -p /opt/portainer ${globals.CERTS}
      openssl genrsa -out ${globals.CERTS}/portainer.key 2048
      openssl ecparam -genkey -name secp384r1 -out ${globals.CERTS}/portainer.key
      openssl req -new -x509 -sha256 -key ${globals.CERTS}/portainer.key -out ~/.ssh/certs/portainer.crt -days 3650 -subj "/CN=${env.domain}"

  install-LE:
    - cmd[${nodes.cp.master.id}]: |-
        dir=${globals.CERTS}/../certs_ss
        [ ! -d "${dir}" ] && { mkdir -p ${dir}; yes | cp ${globals.CERTS}/* ${dir}; }
        printf '#!/bin/bash
        mkdir -p $(dirname ${globals.DEPLOY_HOOK})
        #wget https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem -O ${globals.CERTS}/ca.crt
        wget https://letsencrypt.org/certs/fakelerootx1.pem -O ${globals.CERTS}/ca.crt
        yes | cp -f /var/lib/jelastic/keys/fullchain.pem ${globals.CERTS}/portainer.crt
        yes | cp -f /var/lib/jelastic/keys/privkey.pem ${globals.CERTS}/portainer.key
        #iptables -t nat -I PREROUTING -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 4848
        #service iptables save
        service docker restart' > ${globals.DEPLOY_HOOK}

        printf '#!/bin/bash
        mkdir -p $(dirname ${globals.UNDEPLOY_HOOK})
        yes | cp -f ${dir}/* ${globals.CERTS}
        #iptables -t nat -D PREROUTING -p tcp -m tcp --dport 443 -j REDIRECT --to-ports 4848
        #service iptables save
        service docker restart' > ${globals.UNDEPLOY_HOOK}

    - install:
        jps: https://raw.githubusercontent.com/jelastic-jps/lets-encrypt/master/manifest.jps?_r=${fn.random}
        nodeGroup: cp
        settings:
          deployHook: ${globals.DEPLOY_HOOK_JS}
          deployHookType: js
          undeployHook: ${globals.DEPLOY_HOOK_JS}
          undeployHookType: js
          _customDomains: ${env.domain}
          
  add-nat-forwarding:
    cmd[${this}]: |-    
      [[ $HOSTNAME != $MASTER_HOST* ]] && {
        iptables -t nat -I PREROUTING -p tcp --dport 443 -j DNAT --to-destination ${nodes.cp.master.intIP}:443 
        iptables -I FORWARD -p tcp -j ACCEPT
        iptables -t nat -I POSTROUTING -d ${nodes.cp.master.intIP} -j MASQUERADE
        service iptables save
      } || echo "skip master node";
      

success: |
  **Portainer UI**: [https://${env.domain}/](https://${env.domain}/)  
  **User**: ${globals.user}  
  **Password**: ${globals.password}  
